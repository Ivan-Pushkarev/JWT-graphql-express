{
  "_id": "63683072577d41fa4da0e9e3",
  "content": {
    "ru": "При создании переменных в JavaScript используют 2 ключевых слова: `let` и `const`.\n\nИх применение зависит от того, будет ли меняться значение переменной.\n\n### Создание переменной с ключевым словом `const`\n\nЕсли значение переменной меняться не будет, необходимо использовать `const`.\n\nПри использовании ключевого слова `const` значение переменной необходимо задавать сразу.  \n\n#### Если значение не задано, будет выдана ошибка `SyntaxError`  \n\nПроверьте это, запустив каждый из примеров в консоли:\n\n```javascript\nconst number; // SyntaxError, не задано значение переменной\nconst str;          // SyntaxError\nconst isHotWeather; // SyntaxError\nconst line;         // SyntaxError\n```\n\n#### Попытка изменить значение переменной с ключевым словом `const` приведет к ошибке `TypeError`\n\nЗапустите переменные ниже в консоли и убедитесь в этом:\n\n```javascript\nconst number = 12345; \nnumber = 98765; // TypeError, попытка изменить значение с ключевым словом `const`.\n\nconst str = 'How are you doing?'; \nstr = 'How are you?'; // TypeError\n```\n\n### Создание переменной с ключевым словом `let`\n\nЕсли значение переменной будет меняться, необходимо использовать ключевое слово `let`.\n\n`let` позволяет присваивать переменной новое значение.\n\nПри изменении значения слово `let` использовать не нужно.\n\n```javascript\nlet num = 5; // создание переменной с ключевым словом `let`\nconsole.log(num); // 5 - значение переменной\nnum = 10; // изменили значение переменной num\nconsole.log(num); // 10 - новое значение переменной\n```\n\n#### Объявление переменной в одну строку\n\nДля краткости кода можно объявлять переменные в одну строку. Перечисление переменных происходит через запятую.\n\n```javascript\nlet num = 5, newNum = 15, oldNum = 10; // создали три переменные\nconsole.log(num, newNum, oldNum); // 5, 15, 10 - значения переменных\n```\n\n#### Создание пустой переменной\n\nПри использовании ключевого слова `let` можно создать переменную и присвоить ей значение позже.\n\n```javascript\nlet telNumber; // создали переменную\ntelNumber = 15058768956; // присвоили переменной значение\nconsole.log(telNumber);  // 15058768956 - значение переменной\n```\n\n#### Вызов переменной до ее объявления\n\nВызов переменной без значения выдаст `undefined`. Присвоить переменной новое значение можно с помощью оператора присваивания `=`.\n\n```javascript\nlet str; // создали переменную\nconsole.log(str); // undefined, переменная не имеет значения\nstr = 'Hello, QA student!'; // присвоили переменной значение  \nconsole.log(str); // \"Hello, QA student!\" - значение переменной\n```\n\n#### Переопределение значения переменной\n\nЗначение переменной можно переопределить несколько раз. В этом случае переменная будет иметь последнее значение.\n\n```javascript\nlet line; // создали переменную                  \nline = 'Coding challenge'; // присвоили переменной значение\nline = 100; // изменили значение переменной\nconsole.log(line); // 100, выводится последнее измененное значение\n```\n",
    "en": "JavaScript uses 2 keywords when creating variables: `let` and `const`.\n\nTheir application depends on whether the value of the variable will change.\n\n### Creating a variable with the `const` keyword\n\nIf the value of the variable will not change, you must use `const`.\n\nIf the `const` keyword is used, the value of the variable must be set immediately.  \n\n#### If the value is not set, an error `SyntaxError` will be thrown  \n\nCheck this by running each of the examples in the console:\n\n```javascript\nconst number; // SyntaxError, no variable value was set\nconst str; // SyntaxError\nconst isHotWeather; // SyntaxError\nconst line; // SyntaxError\n```\n\n#### Attempting to change the value of a variable with the `const` keyword will result in a `TypeError` error\n\nRun the variables below in the console and see for yourself:\n\n```javascript\nconst number = 12345; \nnumber = 98765; // TypeError, an attempt to change a value with the `const` keyword.\n\nconst str = 'How are you doing?' \nstr = 'How are you?'; // TypeError\n```\n\n### Creating a variable with the keyword `let`\n\nIf the value of the variable will change, you must use the keyword `let`.\n\nThe `let` allows you to assign a new value to a variable.\n\nIt is not necessary to use the word `let` when changing the value.\n\n```javascript\nlet num = 5; // create a variable with keyword `let`.\nconsole.log(num); // 5 is the value of the variable\nnum = 10; // changed the value of num variable\nconsole.log(num); // 10 is the new value of the variable\n```\n\n#### One line variable declaration\n\nTo keep the code short you can declare variables on one line. Variables are enumerated separated by commas.\n\n```javascript\nlet num = 5, newNum = 15, oldNum = 10; // create three variables\nconsole.log(num, newNum, oldNum); // 5, 15, 10 are the values of the variables\n```\n\n#### Creating an empty variable\n\nIf you use the `let` keyword you can create a variable and assign a value to it later.\n\n```javascript\nlet telNumber; // create a variable\ntelNumber = 15058768956; // let's set the variable value\nconsole.log(telNumber); // 15058768956 is the value of the variable\n```\n\n#### Calling a variable before it is declared\n\nCalling a variable without a value will return `undefined`. You can assign a new value to a variable using the assignment operator `=`.\n\n```javascript\nlet str; // create a variable\nconsole.log(str); // undefined, the variable has no value\nstr = 'Hello, QA student!'; // set the variable to a value  \nconsole.log(str); // \"Hello, QA student!\" - variable value\n```\n\n#### Redefining a variable value\n\nThe value of a variable can be redefined several times. In this case the variable will have the last value.\n\n```javascript\nlet line; // create a variable        \nline = 'Coding challenge'; // assign a value to the variable\nline = 100; // we changed the value of the variable\nconsole.log(line); // 100, the last modified value is output\n```\n",
    "es": "# Разница между let и const language: es"
  },
  "video": {
    "ru": "https://youtu.be/zBAhgSO_uA8",
    "en": "",
    "es": ""
  }
}