{
  "_id": "63689267157a0ef5c22aa35b",
  "content": {
    "ru": "### Логический оператор ИЛИ (`||`)\n\nЛогический оператор `ИЛИ` пишется, как двойной символ вертикальной черты `||`.\n\nОператор `ИЛИ` используется с двумя или более значениями и может применяться к значениям любого типа и возвращать также значение любого типа.\n\nЭтот оператор работает следующим образом: если **хотя бы один** из аргументов `true`, то возвращает `true`, иначе – `false`.\n\nНапример, представим, что мы стоим на остановке и ждём автобус № 1 или № 5.\n\n```javascript\nconst bus = 5;  // автобус № 5\nif(bus === 1 || bus === 5) {  // если автобусы № 1 или № 5\n  console.log('Go');  // Go! т.к. автобус  № 5   \n}\n```\n\nА теперь представим, что мы ждём автобус № 1 или № 5 или № 17.\n\n```javascript\nconst bus = 17;  // автобус № 17\nif(bus === 1 || bus === 5 || bus === 17) {  // если автобусы № 1 или № 5 или № 17\n  console.log('Go');  // Go! т.к. автобус  17\n}\n```\n\nРассмотрим всего четыре существующие логические комбинации для оператора `||`:\n\n```javascript\nconsole.log(true || true);  // true, все значения истинны\nconsole.log(false || true);  // true, одно из значений истинно\nconsole.log(true || false);  // true, одно из значений истинно\nconsole.log(false || false);  // false, все значения ложны\n```\n\nЭтот оператор работает следующим образом:\n\n* Вычисляет операнды слева направо\n* Каждый операнд приводит к типу `boolean`\n* Если встретится значение `true`, останавливается и возвращает исходное значение этого операнда.\n* Если все операнды являются ложными `false`, возвращает последний из них.\n\nВ данном примере, число 1 преобразиться к `true`, а 0 – к `false`.\n\n```javascript\nconsole.log(1 || 0);  // сработает как (true || false) -> true, в консоль выведет 1\nconsole.log(0 || false || 1);  // 1, возвращает первый `true`\nconsole.log(0 || false || 1 || null);  // 1, возвращает первый `true`\nconsole.log(0 || false || undefined || null);  // null, выведет последнее значение, так как все аргументы `false`\n```\n\nРассмотрим еще один пример, допустим, свет в офисе должен быть включён с 8 до 19.\n\n```javascript\nconst time = 12;\nif(time > 8 || time < 19) {  // первое условие истинно, 12 > 8\n  console.log('Light');  // в консоль выведет Light\n}\n```\n\nА что, если время суток будет 22 часа ночи?\n\nСвет в офисе будет все равно включён, так как первое условие истинно!\n\n```javascript\nconst time = 22;\nif(time > 8 || time < 19) {  // первое условие истинно, 22 > 8\n  console.log('Light');  // в консоль выведет Light\n}\n```\n\nДля решения этой задачи нам понадобиться оператор И (`&&`).\n\n### Логический оператор И (`&&`)\n\nЕсли оператор ИЛИ (`||`) работает до тех пор, пока не встретит первый `true`, то оператор И (`&&`), наоборот, работает до тех пор, пока не встретит первый `false`.\n\nЛогический оператор `И` пишется, как два амперсанда `&&`.\n\nРассмотрим тот же пример с офисом, свет в офисе должен быть включён с 8 до 19. Это 24-часовой формат времени.\n\n```javascript\nconst time = 12;\nif(time > 8 && time < 19) {  // оба условия истинны (true && true), 12 > 8 И 12 < 19\n  console.log('Light');  // в консоль выведет Light\n}\n```\n\nТеперь попробуем задать время суток 22 часа ночи:\n\n```javascript\nconst time = 22;\nif(time > 8 && time < 19) {  // первое сравнение истинное, второе - ложное (true && false), 22 > 8 И 22 < 19\n  console.log('Light');  // в консоль ничего не выведет\n}\n```\n\nРассмотрим всего четыре существующие логические комбинации для оператора `&&`:\n\n```javascript\nconsole.log(true && true);  // true, все значения истинны\nconsole.log(false && true);  // false, одно из значений ложно\nconsole.log(true && false);  // false, одно из значений ложно\nconsole.log(false && false);  // false, все значения ложны\n```\n\nОператор `&&` выполняет следующие действия:\n\n* Вычисляет операнды слева направо.\n* Каждый операнд приводит к типу `boolean`\n* Если встретится значение `false`, останавливается и возвращает исходное значение этого операнда.\n* Если все операнды являются истинными `true`, возвращает последний из них.\n\nВ данном примере, числа 1 и 2, строка 'hello' преобразиться к `true`, а 0 и null – к `false`.\n\n```javascript\nconsole.log(1 && 0);  // сработает, как (true && false) -> false, в консоль выведет 0\nconsole.log(1 && 2);  // 2, возвращает последний true\nconsole.log(false && 2 && '');  // false, возвращает false\nconsole.log(1 && 'hello' && null && 0);  // null, возвращает false\nconsole.log(1 && 'hello' && true && 2);  // 2, выведет последнее значение, так как все аргументы - true\n```\n\nКак и числовые операторы, логические операторы имеют разный приоритет, который влияет на последовательность их выполнения.\n\nЗапомните эту последовательность: первым выполнится оператор (И) `&&`, а затем (ИЛИ) `||`.\n\n```javascript\nconsole.log(1 || 0 && 3);  // 0 && 3 -> 0, затем 1 || 0 -> 1, в консоль выведет 1\n```\n",
    "en": "# Логическое ИЛИ и И. Операторы ||, && language: en",
    "es": "# Логическое ИЛИ и И. Операторы ||, && language: es"
  },
  "video": {
    "ru": "https://youtu.be/ANpi-v-1x7Y",
    "en": "",
    "es": ""
  }
}