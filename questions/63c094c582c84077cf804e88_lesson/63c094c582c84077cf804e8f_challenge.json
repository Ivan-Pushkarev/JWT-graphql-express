{
  "_id": "63c094c582c84077cf804e8f",
  "name": {
    "ru": "Форматировать имя на табличке",
    "en": "",
    "es": ""
  },
  "instruction": {
    "ru": "Для всех сотрудников компании необходимо создать таблички с именами в едином формате.\n\nНапишите функцию `formatName`, которая принимает две строки с именем и фамилией\n\nПусть функция возвращает строку формате `JOHNSON E.`.\n\nПосмотрите примеры.\n\nПример запуска функции:\n```javascript\nformatName('johnson', 'edwin'); // 'Johnson E.'\nformatName('JOHNSON', 'EDWIN'); // 'Johnson E.'\nformatName('   johnson ', '  edwin '); // 'Johnson E.'\n```\n\nВходные данные могут быть в любом регистре, а также содержать пробелы в начале и в конце строки.",
    "en": "",
    "es": ""
  },
  "initialSolution": "fun",
  "completedSolution": "function formatName(firstName, lastName) {\n  return `${firstName.trim().toUpperCase()} ${lastName.trim().toUpperCase()[0]}.`;\n}",
  "openTest": "it('Created function formatName', () => {\n  expect(formatName).to.be.a('function');\n});\n\nit('formatName(\"johnson\", \"edwin\") should return \"JOHNSON E.\"', () => {\n  expect(formatName('johnson', 'edwin')).to.be.equal('JOHNSON E.');\n});\n\nit('formatName(\"SAMUEL\", \"EDWIN\") should return \"SAMUEL E.\"', () => {\n  expect(formatName('SAMUEL', 'EDWIN')).to.be.equal('SAMUEL E.');\n});\n\nit('formatName(\"   michael \", \"  thomas \") should return \"MICHAEL T.\"', () => {\n  expect(formatName('   michael ', '  thomas ')).to.be.equal('MICHAEL T.');\n});\n\nit('formatName(\"   victoria \", \"  mary \") should return \"VICTORIA M.\"', () => {\n  expect(formatName('   victoria ', '  mary ')).to.be.equal('VICTORIA M.');\n});\n\nit('formatName(\"   ukko \", \"  jussi \") should return \"UKKO J.\"', () => {\n   expect(formatName('   ukko ', '  jussi ')).to.be.equal('UKKO J.');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit"
}