{
  "_id": "63c094c582c84077cf804e5f",
  "name": {
    "ru": "Если среди четырех строк есть одинаковые по длине",
    "en": "",
    "es": ""
  },
  "instruction": {
    "ru": "Напишите функцию `hasEqualLength`, которая принимает четыре строки и возвращает `true`, если среди них есть хотя бы две с одинаковой длиной, и `false` в противном случае.\n\nПримеры запуска функции:\n```javascript\nhasEqualLength('aaa', 'aa', 'aa', 'aaaa'); // true\nhasEqualLength('aaa', 'aa', 'aaa', 'aa'); // true\nhasEqualLength('aaa', 'aa', 'aaaa', 'aaaaa'); // false\n```\nПроверьте каждую пару строк на равенство длины. Если хотя бы одна пара строк имеет одинаковую длину, функция должна возвращать `true`.\n\nЕсли ни одна пара строк не имеет одинаковой длины, функция должна возвращать `false`.",
    "en": "",
    "es": ""
  },
  "initialSolution": "fun",
  "completedSolution": "function hasEqualLength(str1, str2, str3, str4) {\n  return (\n    str1.length === str2.length ||\n    str1.length === str3.length ||\n    str1.length === str4.length ||\n    str2.length === str3.length ||\n    str2.length === str4.length ||\n    str3.length === str4.length\n  );\n}",
  "openTest": "it('Created function hasEqualLength', () => {\n  expect(hasEqualLength).to.be.a('function');\n});\n\nit('hasEqualLength(\"aaa\", \"aa\", \"aa\", \"aaaa\") should return true', () => {\n  expect(hasEqualLength('aaa', 'aa', 'aa', 'aaaa')).to.equal(true);\n});\n\nit('hasEqualLength(\"aaa\", \"aa\", \"aaa\", \"aa\") should return true', () => {\n  expect(hasEqualLength('aaa', 'aa', 'aaa', 'aa')).to.equal(true);\n});\n\nit('hasEqualLength(\"aaa\", \"aaa\", \"aa\", \"aaaaa\") should return true', () => {\n  expect(hasEqualLength('aaa', 'aaa', 'aa', 'aaaaa')).to.equal(true);\n});\n\nit('hasEqualLength(\"aaa\", \"aa\", \"aaaa\", \"aaaa\") should return true', () => {\n  expect(hasEqualLength('aaa', 'aa', 'aaaa', 'aaaa')).to.equal(true);\n});\n\nit('hasEqualLength(\"aaa\", \"aa\", \"aaaa\", \"aaaaa\") should return false', () => {\n  expect(hasEqualLength('aaa', 'aa', 'aaaa', 'aaaaa')).to.equal(false);\n});\n\nit('hasEqualLength(\"\", \"aa\", \"aaa\", \"\") should return true', () => {\n  expect(hasEqualLength('', 'aa', 'aaa', '')).to.equal(true);\n});\n\nit('hasEqualLength(\"\", \"aa\", \"aaa\", \"aaaa\") should return false', () => {\n  expect(hasEqualLength('', 'aa', 'aaa', 'aaaa')).to.equal(false);\n});\n\nit('hasEqualLength(\"aaa\", \"aa\", \"a\", \"aaaa\") should return false', () => {\n  expect(hasEqualLength('aaa', 'aa', 'a', 'aaaa')).to.equal(false);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit"
}