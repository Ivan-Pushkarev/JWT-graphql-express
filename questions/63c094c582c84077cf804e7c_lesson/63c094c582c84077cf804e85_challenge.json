{
  "_id": "63c094c582c84077cf804e85",
  "name": {
    "ru": "Очень рад вас видеть",
    "en": "",
    "es": ""
  },
  "instruction": {
    "ru": "Напиши функцию `veryHappy`, которая принимает два параметра:\n`name` - имя человека\n`count` - количество раз, которое нужно повторить слово `very`\n\nПримеры запуска функции:\n```javascript\nveryHappy('John', 1); // 'I\\'m very happy to see you, John!'\nveryHappy('John', 3); // 'I\\'m very very very happy to see you, John!'\nveryHappy('John', 5); // 'I\\'m very very very very very happy to see you, John!'\n```\n\nЕсли в одинарных кавычках внутри строки встречается одинарная кавычка, то ее нужно экранировать символом `\\`.\n\n```javascript\nconsole.log('I\\'m very happy to see you, John!'); // I'm very happy to see you, John!\nconsole.log('I\\'m \\'very\\' happy to see you, John!'); // I'm 'very' happy to see you, John!\n```",
    "en": "",
    "es": ""
  },
  "initialSolution": "fun",
  "completedSolution": "function veryHappy(name, count) {\n  return \"I'm \" + 'very '.repeat(count) + 'happy to see you, ' + name + '!';\n}",
  "openTest": "it('Created function veryHappy', () => {\n  expect(veryHappy).to.be.a('function');\n});\n\nit('veryHappy(\"John\", 1) should return \"I\\'m very happy to see you, John!\"', () => {\n  expect(veryHappy('John', 1)).to.be.equal(\"I'm very happy to see you, John!\");\n});\n\nit('veryHappy(\"John\", 3) should return \"I\\'m very very very happy to see you, John!\"', () => {\n  expect(veryHappy('John', 3)).to.be.equal(\"I'm very very very happy to see you, John!\");\n});\n\nit('veryHappy(\"Alice\", 5) should return \"I\\'m very very very very very happy to see you, Alice!\"', () => {\n  expect(veryHappy('Alice', 5)).to.be.equal(\n    \"I'm very very very very very happy to see you, Alice!\",\n  );\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit"
}