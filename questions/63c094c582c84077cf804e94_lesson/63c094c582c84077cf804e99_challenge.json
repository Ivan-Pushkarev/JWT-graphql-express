{
  "_id": "63c094c582c84077cf804e99",
  "name": {
    "ru": "Искать вхождение начиная с третьего слова",
    "en": "",
    "es": ""
  },
  "instruction": {
    "ru": "Напишите функцию `search`, которая принимает две строки и возвращает индекс вхождения второй строки в первую, начиная поиск с третьего слова.\n\nСлова разделяются пробелами.\n\nНайдите индекс первого пробела в строке и используйте его как начало поиска для поиска индекса второго пробела.\n\nПотом используйте найденный индекс второго пробела как начало поиска для подстроки.\n\nПримеры запуска функции:\n```javascript\nsearch('Hello wonderful world', 'o'); // 17\nsearch('Hello wonderful world', 'l'); // 19\nsearch('Hello wonderful world', 'e'); // -1\n```\nЕсли строка не найдена, функция должна возвращать `-1`.",
    "en": "",
    "es": ""
  },
  "initialSolution": "fun",
  "completedSolution": "function search(string, substring) {\n  const spaceIndex = string.indexOf(' ');\n  const secondSpaceIndex = string.indexOf(' ', spaceIndex + 1);\n  return string.indexOf(substring, secondSpaceIndex);\n}",
  "openTest": "it('Created function search', () => {\n  expect(search).to.be.a('function');\n});\n\nit('search(\"Hello wonderful world\", \"o\") should return 17', () => {\n  expect(search('Hello wonderful world', 'o')).to.be.equal(17);\n});\n\nit('search(\"Hello wonderful world\", \"l\") should return 19', () => {\n  expect(search('Hello wonderful world', 'l')).to.be.equal(19);\n});\n\nit('search(\"Hello wonderful world\", \"e\") should return -1', () => {\n  expect(search('Hello wonderful world', 'e')).to.be.equal(-1);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit"
}