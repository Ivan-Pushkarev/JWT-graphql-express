{
  "_id": "63c09a67c7887ca79e289f91",
  "name": {
    "ru": "Насколько подешевела машина за несколько лет",
    "en": "",
    "es": ""
  },
  "instruction": {
    "ru": "Напишите функцию `changePrice`, которая принимает параметры:\n* объект `car` с информацией о машине,\n* целое положительное число `year` – текущий год,\n* целое положительное число `n` – на сколько подешевела машина за год.\n\nВ объекте `car` хранится информация о машине:\n* `make` - марка автомобиля, строка,\n* `model` - модель автомобиля, строка,\n* `year` - год выпуска автомобиля, число,\n* `color` - цвет автомобиля, строка,\n* `price` - цена автомобиля, число.\n\nКаждый год цена машины уменьшается на `n` долларов.\n\n\nФункция должна вернуть строку вида:\n'TOYOTA - CAMRY - 2020 - WHITE $60000'\n\nПример запуска функции:\n```javascript\nchangePrice(\n  { make: 'Toyota', model: 'Camry', year: 2010, color: 'red', price: 20000 },\n  2015,\n  1500\n) // 'TOYOTA - CAMRY - 2010 - RED $12500'\n\nchangePrice(\n  { make: 'Ford', model: 'Mustang', year: 2015, color: 'white', price: 60000 },\n  2016,\n  2500\n) // 'FORD - MUSTANG - 2015 - WHITE $57500'\n```\n\nОтвет должен быть в верхнем регистре.\n\nЕсли текущий год меньше года выпуска машины, то функция должна вернуть строку вида: `Current year is less than car year`",
    "en": "",
    "es": ""
  },
  "initialSolution": "fun",
  "completedSolution": "function changePrice(car, year, n) {\n  if (year < car.year) return 'Current year is less than car year';\n  const price = car.price - (year - car.year) * n;\n  return (\n    car.make +\n    ' - ' +\n    car.model +\n    ' - ' +\n    car.year +\n    ' - ' +\n    car.color +\n    ' $' +\n    price\n  ).toUpperCase();\n}",
  "openTest": "it('Created function changePrice', () => {\n  expect(changePrice).to.be.a('function');\n});\n\nit('changePrice({ make: \"Toyota\", model: \"Camry\", year: 2010, color: \"red\", price: 20000 }, 2015, 1000) should return TOYOTA - CAMRY - 2010 - RED $15000', () => {\n  expect(\n    changePrice(\n      { make: 'Toyota', model: 'Camry', year: 2010, color: 'red', price: 20000 },\n      2015,\n      1000,\n    ),\n  ).eq('TOYOTA - CAMRY - 2010 - RED $15000');\n});\n\nit('changePrice({ make: \"Toyota\", model: \"Camry\", year: 2020, color: \"white\", price: 40000 }, 2015, 2000) should return Current year is less than car year', () => {\n  expect(\n    changePrice(\n      { make: 'Toyota', model: 'Camry', year: 2020, color: 'white', price: 40000 },\n      2015,\n      2000,\n    ),\n  ).eq('Current year is less than car year');\n});\n\nit('changePrice({ make: \"Ford\", model: \"Mustang\", year: 2015, color: \"white\", price: 60000 }, 2016, 2500) should return FORD - MUSTANG - 2015 - WHITE $57500', () => {\n  expect(\n    changePrice(\n      { make: 'Ford', model: 'Mustang', year: 2015, color: 'white', price: 60000 },\n      2016,\n      2500,\n    ),\n  ).eq('FORD - MUSTANG - 2015 - WHITE $57500');\n});\n\nit('changePrice({ make: \"Ford\", model: \"Mustang\", year: 2015, color: \"white\", price: 60000 }, 2015, 2500) should return FORD - MUSTANG - 2015 - WHITE $60000', () => {\n  expect(\n    changePrice(\n      { make: 'Ford', model: 'Mustang', year: 2015, color: 'white', price: 60000 },\n      2015,\n      2500,\n    ),\n  ).eq('FORD - MUSTANG - 2015 - WHITE $60000');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit"
}