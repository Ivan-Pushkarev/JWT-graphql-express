{
  "_id": "63c09a67c7887ca79e289f90",
  "name": {
    "ru": "Поменяй свойства в объекте",
    "en": "",
    "es": ""
  },
  "instruction": {
    "ru": "Напиши функцию `person`, которая принимает параметры:\n* `obj` – объект,\n* `newAge` – число,\n* `newCity` – строка.\n\nОбъект должен иметь свойства:\n* `name` – имя человека, строка,\n* `age` – возраст, число,\n* `city` – город, строка\n\nФункция должна изменить значения свойств в объекте `obj`:\n* свойству `age` присвоить значение `newAge`,\n* свойству `city` присвоить значение `newCity`.\n\nФункция должна вернуть объект с новыми значениями.\n\nПример запуска функции:\n```javascript\nperson({ name: 'John', age: 20, city: 'London' }, 30,'New York') // { name: 'John', age: 30, city: 'New York' }\nperson({ name: 'Pavel', age: 10, city: 'Grodno' }, 13,'Boston') // { name: 'Pavel', age: 13, city: 'Boston' }\n```\n\nПохожий пример:\n```javascript\nfunction changeCarRegion(car, newLicensePlate, newRegion) {\n  car.lenLicensePlate = newLicensePlate;\n  car.region = newRegion;\n  return car;\n}\n```",
    "en": "",
    "es": ""
  },
  "initialSolution": "fun",
  "completedSolution": "function person(obj, newAge, newCity) {\n  obj.age = newAge;\n  obj.city = newCity;\n  return obj;\n}",
  "openTest": "it('Created function person', () => {\n  expect(person).to.be.a('function');\n});\n\nit('person({ name: \"John\", age: 20, city: \"London\" }, 30, \"New York\") should return { name: \"John\", age: 30, city: \"New York\" }', () => {\n  expect(person({ name: 'John', age: 20, city: 'London' }, 30, 'New York')).to.deep.equal(\n    { name: 'John', age: 30, city: 'New York' },\n  );\n});\n\nit('person({ name: \"Pavel\", age: 10, city: \"Grodno\" }, 13, \"Boston\") should not return { name: \"Pavel\", age: 13, city: \"Boston\" }', () => {\n  expect(person({ name: 'Pavel', age: 10, city: 'Grodno' }, 13, 'Boston')).to.deep.equal({\n    name: 'Pavel',\n    age: 13,\n    city: 'Boston',\n  });\n});\n\nit('person({ name: \"Maria\", age: 56, city: \"Gomel\" }, 39, \"Andover\") should return { name: \"Maria\", age: 39, city: \"Andover\" }', () => {\n  expect(person({ name: 'Maria', age: 56, city: 'Gomel' }, 39, 'Andover')).to.deep.equal({\n    name: 'Maria',\n    age: 39,\n    city: 'Andover',\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit"
}