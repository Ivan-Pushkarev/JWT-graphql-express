{
  "_id": "63c09a67c7887ca79e289f9d",
  "name": {
    "ru": "Цена игрушек",
    "en": "",
    "es": ""
  },
  "instruction": {
    "ru": "Напишите функцию `totalPrice`, которая принимает два объекта:\n* `toysQuantity` - количество каждой игрушки,\n* `toysPrice` - цена каждой игрушки.\n\nОба объекта имеют три свойства: `legos`, `cars` и `puzzles`.\n\nФункция должна вернуть объект, в котором будет 5 свойств:\n* `totalPriceLegos` - общая цена за лего,\n* `totalPriceCars` - общая цена за машинки,\n* `totalPricePuzzles` - общая цена за пазлы,\n* `totalToysQuantity` - общее количество игрушек,\n* `totalPrice` - общая цена за все игрушки.\n\nПример запуска функции:\n```javascript\ntotalPrice({legos: 5, cars: 7, puzzles: 15}, {legos: 40, cars: 15, puzzles: 26});     // { totalPriceLegos: 200,\n totalPriceCars: 105, totalPricePuzzles: 390, totalToysQuantity: 27, totalPrice: 695 }\n\ntotalPrice({legos: 8, cars: 12, puzzles: 25}, {legos: 35, cars: 5, puzzles: 25});     // { totalPriceLegos: 280,\n totalPriceCars: 60, totalPricePuzzles: 625, totalToysQuantity: 45, totalPrice: 965 }",
    "en": "",
    "es": ""
  },
  "initialSolution": "fun",
  "completedSolution": "function totalPrice(toysQuantity, toysPrice) {\n  return {\n    totalPriceLegos: toysQuantity.legos * toysPrice.legos,\n    totalPriceCars: toysQuantity.cars * toysPrice.cars,\n    totalPricePuzzles: toysQuantity.puzzles * toysPrice.puzzles,\n    totalToysQuantity: toysQuantity.legos + toysQuantity.cars + toysQuantity.puzzles,\n    totalPrice: toysQuantity.legos * toysPrice.legos + toysQuantity.cars * toysPrice.cars + toysQuantity.puzzles * toysPrice.puzzles,\n  }\n}",
  "openTest": "it('Created function totalPrice', () => {\n  expect(totalPrice).to.be.a('function');\n});\n\nit('Function totalPrice returns object', () => {\n  expect(totalPrice({ legos: 5, cars: 7, puzzles: 15 }, { legos: 40, cars: 15, puzzles: 26 })).to.be.a('object');\n});\n\nit('totalPrice({legos: 5, cars: 7, puzzles: 15}, {legos: 40, cars: 15, puzzles: 26}) return { totalPriceLegos: 200, totalPriceCars: 105, totalPricePuzzles: 390, totalToysQuantity: 27, totalPrice: 695 }', () => {\n  expect(totalPrice({ legos: 5, cars: 7, puzzles: 15 }, { legos: 40, cars: 15, puzzles: 26 })).to.deep.equal({ totalPriceLegos: 200, totalPriceCars: 105, totalPricePuzzles: 390, totalToysQuantity: 27, totalPrice: 695 });\n});\n\nit('totalPrice({legos: 8, cars: 12, puzzles: 25}, {legos: 35, cars: 5, puzzles: 25}) return { totalPriceLegos: 280, totalPriceCars: 60, totalPricePuzzles: 625, totalToysQuantity: 45, totalPrice: 965 }', () => {\n  expect(totalPrice({ legos: 8, cars: 12, puzzles: 25 }, { legos: 35, cars: 5, puzzles: 25 })).to.deep.equal({ totalPriceLegos: 280, totalPriceCars: 60, totalPricePuzzles: 625, totalToysQuantity: 45, totalPrice: 965 });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit"
}